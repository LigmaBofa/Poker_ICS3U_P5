import java.util.Random;
import java.util.Scanner;

/**
 * Names: Derrick, Joshua, Frank, Samson
 * Teacher: Mrs. Andrighetti
 * Date: December 5, 2018
 * Description: A game of poker with 2 players...
 */

public class Main {

	static Scanner sc = new Scanner(System.in);
	static String[] deck = new String[52];
	static boolean[] usedCards = new boolean[52];
	
	static int p1Money = 50;
	static int p2Money = 50;
	static String[] playerOneHoleCards = new String[2];
	static String[] playerTwoHoleCards = new String[2];
	
	static String[] communityCards = new String[5];
	
	static int turn = 0; // 0 is p1's turn, 1 is p2's turn
	
	static void createDeck () {
		// store 2 to 10 in deck array.
		int cardNum = 2;
		for (int i = 0; i < 36; i = i + 4) {
			for (int j = i; j < (i + 4); j++) {
				deck[j] = (cardNum) + " of ";
				calculateSuite(i, j);
			}
			cardNum++;
		}
		// store jack to ace cards in deck array.
		for (int i = 36; i < 52; i = i + 4) {
			for (int j = i; j < (i + 4); j++) {
				if (i == 36) {
					deck[j] = "Jack of ";
				} else if (i == 40) {
					deck[j] = "Queen of ";
				} else if (i == 44) {
					deck[j] = "King of ";
				} else if (i == 48) {
					deck[j] = "Ace of ";
				}
				calculateSuite(i, j);
			}
		}

		// comment out later
		for (int i = 0; i < deck.length; i++) {
			System.out.println(deck[i]);
		}
	}
	
	static void calculateSuite (int i, int j) {
		if (j == i){
			deck[j] += "Diamonds";
		} else if (j == i+1){
			deck[j] += "Clubs";
		} else if (j == i+2){
			deck[j] += "Hearts";
		} else if (j == i+3){
			deck[j] += "Spades";
		}
	}
	
	public static void main(String[] args) {
		
		createDeck();
		String rematch;
		
		do {
			System.out.println("\n     " + "\n     * ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ *"
					+ "\n       Welcome to the game of Poker! " + "\n     * ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ *\n");

			// Print out basic how to play and rules.
			System.out.println("     How to play:");

			System.out.println("     Decide who is Player 1 and Player 2.\n");
			System.out.print("     Enter Player 1's name: ");
			String temp = sc.next();
			String p1Name = temp.substring(0, 1).toUpperCase() + temp.substring(1).toLowerCase(); // makes the first letter of name capital, and rest lower case.
			sc.nextLine();

			System.out.print("     Enter Player 2's name: ");
			temp = sc.next();
			String p2Name = temp.substring(0, 1).toUpperCase() + temp.substring(1).toLowerCase(); // makes the first letter of name capital, and rest lower case.
			sc.nextLine();

			System.out.println("\n     The Small blind will go to " + p1Name + ", meaning a mandatory bet of $1.");
			System.out.println("\n     The Big blind will go to " + p2Name + ", meaning a mandatory bet of $2.");
			p1Money -= 1;
			p2Money -= 2;
			outMoney(p1Name, p2Name);

			System.out.println("    The hole cards for each player will now be dealt.");
			dealHoleCards(p1Name, p2Name);

			// deal flop
			System.out.println("     The community cards will now be revealed:");
			dealFlop();
			for (int i = 0; i < 3; i++) {
				System.out.println("          --> " + communityCards[i]);
			}

			// betting round
			
			
			// deal turn
			
			
			// betting round
			
			
			// deal river
			
			
			// betting round
			
			
			// find winner
			compareHands(p1Name, p2Name);
			
			
			System.out.println("     Do you want a rematch? Enter \"yes\" or \"no\"");
			rematch = sc.next();
			
			while (!rematch.equalsIgnoreCase("yes") && !rematch.equalsIgnoreCase("no")) {
				System.out.println("     Invalid, please enter again.");
				System.out.print("          ~~~~~: ");
				rematch = sc.next();
			}
			
		} while (rematch.equals("yes"));
		
		System.out.println("          *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
		System.out.println("          | |   THANSK FR PAYING! :D    | |");
		System.out.println("          *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
		System.out.println("\n          This game was created by eBIC gAmer sICOeTY(tm)");
	}
	
	static void outMoney(String p1Name, String p2Name) { // printing out money for each player
		System.out.println();
		System.out.println("     Current chip/money amount for each player:");
		System.out.println("          ***-------------------------------***");
		System.out.println("           / " + p1Name + " has $" + p1Money + " worth of chips.");
		System.out.println("           \\ " + p2Name + " has $" + p2Money + " worth of chips.");
		System.out.println("          ***-------------------------------***");
		System.out.println();
	}
	
	static int checkValid (int cardNumber) { // check if card was dealt already
		
		while (usedCards[cardNumber] == true) {
			cardNumber = (int) (Math.random()*51+1);
		}
		
		return cardNumber;
	}
	
	static void dealHoleCards(String p1, String p2) {
		Random random = new Random();

		// randomly choose the hole cards
		int cardNumber;
		for (int i = 0; i < 2; i++) {
			cardNumber = (int) (Math.random()*51+1);
		//	cardNumber = Random.nextInt(52);
			cardNumber = checkValid(cardNumber);
			usedCards[cardNumber] = true;
			playerOneHoleCards[i] = deck[cardNumber];
		}

		for (int i = 0; i < 2; i++) {
			cardNumber = (int) (Math.random()*51+1);
			cardNumber = checkValid(cardNumber);
		//	cardNumber = Random.nextInt(52);
			usedCards[cardNumber] = true;
			playerTwoHoleCards[i] = deck[cardNumber];
		}

		System.out.println("     Make sure " + p2 + " doesn't look at the screen. Enter to continue.");
		sc.nextLine();
		System.out.print("     Here are " + p1 + "'s Hole Cards: "); // somehow only show this to one player
		for (int i = 0; i < 2; i++) {
			System.out.print(playerOneHoleCards[i] + "     ");
		}
		
		System.out.println("\n          Enter to continue.");
		sc.nextLine();

		 // clear page so player 2 can't see previous cards
		for(int j = 0; j < 50; j++) { System.out.println(); }

		
		System.out.println("    Make sure " + p1 + " doesn't look at the screen. Enter to continue.");
		sc.nextLine();
		System.out.print("     Here are " + p2 + "'s Hole Cards: ");
		for (int i = 0; i < 2; i++) {
			System.out.print(playerTwoHoleCards[i] + "     ");
		}
		
		System.out.println("\n          Enter to continue.");
		sc.nextLine();
		
		// clear page so player 1 can't see cards
		for(int j = 0; j < 50; j++) { System.out.println(); }
		
	}
	
	
	public static String[] dealFlop() {
		Random r = new Random();

		// deal cards to 2 players
		// use communityCards

		int cardNumber;
		int i;
		for (i = 0; i < 3; i++) {
		//	cardNumber = Random.nextInt(52);
			cardNumber = (int) (Math.random()*51+1);
			cardNumber = checkValid(cardNumber);
			usedCards[cardNumber] = true;
			communityCards[i] = deck[cardNumber];
		}

		return communityCards;
	}
	
	static void compareHands (String p1, String p2) {
		
		String[] finalHandP1 = new String[5]; // storing the 2 cards to remove for p1.
		int c = 0; // counter for index of finalHand array.
		
		System.out.println("     Now that the final betting round has been finished, we will now determine the winner.");
		sc.nextLine();
		
		System.out.println("     " + p1 + " will now show their cards to " + p2);
		sc.nextLine();
		System.out.println("          " + playerOneHoleCards[0] + " and " + playerOneHoleCards[1]);
		finalHandP1 = getInput(finalHandP1, p1, p2, c); // doesn't check if both community cards are the same.
		
		
		String[] finalHandP2 = new String[5]; // storing the 2 cards to remove for p2.
		c = 0;
		
		System.out.println("     " + p2 + " will now show their cards to " + p1);
		sc.nextLine();
		System.out.println("          " + playerTwoHoleCards[0] + " and " + playerTwoHoleCards[1]);
		finalHandP2 = getInput(finalHandP2, p1, p2, c);
		
	}
	
	static String[] getInput (String[] finalHand, String p1, String p2, int c) {
		
		// start getting input from player 1.
		System.out.println("     What community cards do you want to remove? (e.g. Ace of Hearts.)");
		System.out.println("\n     Here are all the available cards:");
		for(int i = 0; i < 5; i++) {
			System.out.println("          --> " + communityCards[i]);
		}
		for(int i = 0; i < 2; i++) {
			System.out.println(playerOneHoleCards[i]);
		}
		
		System.out.println("          Enter the first community card to remove:"); // reading all the five best cards for player 1.
		System.out.print("            ~~~~~: ");
		finalHand[c] = sc.nextLine();
		System.out.println(finalHand[c]);
		finalHand[c] = ValidCommunity(finalHand, c);
		c++;

		System.out.println("          Enter the second community card to remove:");
		System.out.print("            ~~~~~: ");
		finalHand[c] = sc.nextLine();
		finalHand[c] = ValidCommunity(finalHand, c);
		
		return finalHand;

	}
	
	static String ValidCommunity(String[] finalHand, int c) {
		
		do { // end when input is a valid card
			int countValid = 0;
			for(int j = 0; j < 5; j++) {
				if (finalHand[c].equals(communityCards[j])) {
					countValid++;
				}
			}
			if (countValid != 1) {
				System.out.print("          Invalid input, please enter community card again.");
				System.out.print("\n               ~~~~~: ");
				finalHand[c] = sc.nextLine();
			} else {
				break;
			}
			
		} while (true);
		
		return finalHand[c];
	}

}
