import java.util.Arrays;
import java.util.Scanner;

/**
 * Names: Derrick, Joshua, Frank, Samson
 * Teacher: Mrs. Andrighetti
 * Date: December 5, 2018
 * Description: A game of poker with 2 players...
 */

public class Main {

	static Scanner sc = new Scanner(System.in);
	static String[] deck = new String[52];
	static boolean[] usedCards = new boolean[52];
	
	static int p1Money = 50;
	static int p2Money = 50;
	static String[] playerOneHoleCards = new String[2];
	static String[] playerTwoHoleCards = new String[2];
	
	static String[] communityCards = new String[5];
	
	static int turn = 0; // 0 is p1's turn, 1 is p2's turn
	
	static int highestCardP1 = 0;
	static int highestCardP2 = 0;
	static int numPairs = 0;
	
	static void createDeck () {
		// store 2 to 10 in deck array.
		int cardNum = 2;
		for (int i = 0; i < 36; i = i + 4) {
			for (int j = i; j < (i + 4); j++) {
				deck[j] = (cardNum) + " of ";
				calculateSuite(i, j);
			}
			cardNum++;
		}
		// store jack to ace cards in deck array.
		for (int i = 36; i < 52; i = i + 4) {
			for (int j = i; j < (i + 4); j++) {
				if (i == 36) {
					deck[j] = "Jack of ";
				} else if (i == 40) {
					deck[j] = "Queen of ";
				} else if (i == 44) {
					deck[j] = "King of ";
				} else if (i == 48) {
					deck[j] = "Ace of ";
				}
				calculateSuite(i, j);
			}
		}

		// comment out later
		/*for (int i = 0; i < deck.length; i++) {
			System.out.println(deck[i]);
		}*/
	}
	
	static void calculateSuite (int i, int j) {
		if (j == i){
			deck[j] += "Diamonds";
		} else if (j == i+1){
			deck[j] += "Clubs";
		} else if (j == i+2){
			deck[j] += "Hearts";
		} else if (j == i+3){
			deck[j] += "Spades";
		}
	}
	
	public static void main(String[] args) throws InterruptedException {
		
		createDeck();
		String rematch;
		
		do {
			System.out.println("\n     " + "\n     * ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ *"
					+ "\n       Welcome to the game of Poker! " + "\n     * ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ *\n");

			// Print out basic how to play and rules.
			System.out.println("     How to play:");

			System.out.println("     Decide who is Player 1 and Player 2.\n");
			System.out.print("     Enter Player 1's name: ");
			String temp = sc.next();
			String p1Name = temp.substring(0, 1).toUpperCase() + temp.substring(1).toLowerCase(); // makes the first letter of name capital, and rest lower case.
			sc.nextLine();

			System.out.print("     Enter Player 2's name: ");
			temp = sc.next();
			String p2Name = temp.substring(0, 1).toUpperCase() + temp.substring(1).toLowerCase(); // makes the first letter of name capital, and rest lower case.
			sc.nextLine();

			System.out.println("\n     The Small blind will go to " + p1Name + ", meaning a mandatory bet of $1.");
			System.out.println("\n     The Big blind will go to " + p2Name + ", meaning a mandatory bet of $2.");
			p1Money -= 1;
			p2Money -= 2;
			outMoney(p1Name, p2Name);

			System.out.println("    The hole cards for each player will now be dealt.");
			dealHoleCards(p1Name, p2Name);

			// deal flop
			System.out.println("     The first 3 community cards will now be revealed:");
			dealFlop();
			for (int i = 0; i < 3; i++) {
				System.out.println("          --> " + communityCards[i]);
			}

			// betting round
			
			
			// deal turn
			System.out.println("     The turn or 4th community card will now be revealed:");
			communityCards[3] = dealTurn();
			System.out.println("          --> " + communityCards[3]);
			
			// betting round
			
			
			// deal river
			System.out.println("     The river or 5th community card will now be revealed:");
			communityCards[4] = dealRiver();
			System.out.println("          --> " + communityCards[4]);
			
			// betting round
			
			
			// find winner
			compareHands(p1Name, p2Name);
			
			
			System.out.println("     Do you want a rematch? Enter \"yes\" or \"no\"");
			rematch = sc.next();
			
			while (!rematch.equalsIgnoreCase("yes") && !rematch.equalsIgnoreCase("no")) {
				System.out.println("     Invalid, please enter again.");
				System.out.print("          ~~~~~: ");
				rematch = sc.next();
			}
			
		} while (rematch.equals("yes"));
		
		System.out.println("          *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
		Thread.sleep(250);
		System.out.println("          | |   THANKS FOR PLAYING! :D :D   | |");
		Thread.sleep(250);
		System.out.println("          *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
		Thread.sleep(250);
		System.out.println("\n          This game was created by the eBIC gAmer sICOeTY(tm)");
		Thread.sleep(250);
		System.out.println("\n                      And the group members:");
		Thread.sleep(500);
		System.out.println("\n                             Joshua");
		Thread.sleep(500);
		System.out.println("\n                             Frank");
		Thread.sleep(500);
		System.out.println("\n                             Derrick");
		Thread.sleep(500);
		System.out.println("\n                         and Samson");
	}
	
	static void outMoney(String p1Name, String p2Name) { // printing out money for each player
		System.out.println();
		System.out.println("     Current chip/money amount for each player:");
		System.out.println("          ***-------------------------------***");
		System.out.println("           / " + p1Name + " has $" + p1Money + " worth of chips.");
		System.out.println("           \\ " + p2Name + " has $" + p2Money + " worth of chips.");
		System.out.println("          ***-------------------------------***");
		System.out.println();
	}
	
	static int checkValid (int cardNumber) { // check if card was dealt already
		
		while (usedCards[cardNumber] == true) {
			cardNumber = (int) (Math.random()*51+1);
		}
		
		return cardNumber;
	}
	
	static void dealHoleCards(String p1, String p2) {

		// randomly choose the hole cards
		int cardNumber;
		for (int i = 0; i < 2; i++) {
			cardNumber = (int) (Math.random()*51+1);
		//	cardNumber = Random.nextInt(52);
			cardNumber = checkValid(cardNumber);
			usedCards[cardNumber] = true;
			playerOneHoleCards[i] = deck[cardNumber];
		}

		for (int i = 0; i < 2; i++) {
			cardNumber = (int) (Math.random()*51+1);
			cardNumber = checkValid(cardNumber);
		//	cardNumber = Random.nextInt(52);
			usedCards[cardNumber] = true;
			playerTwoHoleCards[i] = deck[cardNumber];
		}

		System.out.println("     Make sure " + p2 + " doesn't look at the screen. Enter to continue.");
		sc.nextLine();
		System.out.print("     Here are " + p1 + "'s Hole Cards: "); // somehow only show this to one player
		for (int i = 0; i < 2; i++) {
			System.out.print(playerOneHoleCards[i] + "     ");
		}
		
		System.out.println("\n          Enter to continue.");
		sc.nextLine();

		 // clear page so player 2 can't see previous cards
		for(int j = 0; j < 50; j++) { System.out.println(); }

		
		System.out.println("    Make sure " + p1 + " doesn't look at the screen. Enter to continue.");
		sc.nextLine();
		System.out.print("     Here are " + p2 + "'s Hole Cards: ");
		for (int i = 0; i < 2; i++) {
			System.out.print(playerTwoHoleCards[i] + "     ");
		}
		
		System.out.println("\n          Enter to continue.");
		sc.nextLine();
		
		// clear page so player 1 can't see cards
		for(int j = 0; j < 50; j++) { System.out.println(); }
		
	}
	
	// dealing methods
	public static String[] dealFlop() {

		// deal cards to 2 players
		// use communityCards

		int cardNumber;
		int i;
		for (i = 0; i < 3; i++) {
		//	cardNumber = Random.nextInt(52);
			cardNumber = (int) (Math.random()*51+1);
			cardNumber = checkValid(cardNumber);
			usedCards[cardNumber] = true;
			communityCards[i] = deck[cardNumber];
		}

		return communityCards;
	}
	
	public static String dealTurn() {
		// show the 4th community card

		int cardNumber;
		cardNumber = (int) (Math.random() * 51 + 1);
		cardNumber = checkValid(cardNumber);
		usedCards[cardNumber] = true;
		communityCards[3] = deck[cardNumber];

		return communityCards[3];
	}

	public static String dealRiver() {
		// show the 5th community card
		
		int cardNumber;
		cardNumber = (int) (Math.random() * 51 + 1);
		cardNumber = checkValid(cardNumber);
		usedCards[cardNumber] = true;
		communityCards[4] = deck[cardNumber];

		return communityCards[4];
	}
	
	static void compareHands (String p1, String p2) {
		
		String[] finalHandP1 = new String[2]; // storing the 2 cards to remove for p1.
		int c = 0; // counter for index of finalHand array.
		
		System.out.println("     Now that the final betting round has been finished, we will now determine the winner.");
		sc.nextLine();
		
		System.out.println("     " + p1 + " will now show their cards to " + p2);
		sc.nextLine();
		System.out.println("          " + playerOneHoleCards[0] + " and " + playerOneHoleCards[1]);
		finalHandP1 = getInput(finalHandP1, p1, p2, c); // doesn't check if both community cards are the same.
		
		
		String[] finalHandP2 = new String[2]; // storing the 2 cards to remove for p2.
		c = 0;
		
		System.out.println("     " + p2 + " will now show their cards to " + p1);
		sc.nextLine();
		System.out.println("          " + playerTwoHoleCards[0] + " and " + playerTwoHoleCards[1]);
		finalHandP2 = getInput(finalHandP2, p1, p2, c);
		
		String[] bestHP1 = new String[5]; // stores best hand of player one.
		
		bestHP1[0] = playerOneHoleCards[0];
		bestHP1[1] = playerOneHoleCards[1];
		
		int bestHandCounter = 2;
		for(int i = 0; i < communityCards.length; i++) {
			if (communityCards[i].equals(finalHandP1[0]) || communityCards[i].equals(finalHandP1[1])) {
			} else {
				bestHP1[bestHandCounter] = communityCards[i];
				bestHandCounter++;
			}
		}
		System.out.println("Best Hand (p1):");
		for(int i = 0; i < 5; i++) {
			System.out.println("     " + bestHP1[i]);
		}
		
		
		
		String[] bestHP2 = new String[5]; // stores best hand of player two.
		
		bestHP2[0] = playerTwoHoleCards[0];
		bestHP2[1] = playerTwoHoleCards[1];
		
		bestHandCounter = 2;
		for(int i = 0; i < communityCards.length; i++) {
			if (communityCards[i].equals(finalHandP2[0]) || communityCards[i].equals(finalHandP2[1])) {
			} else {
				bestHP2[bestHandCounter] = communityCards[i];
				bestHandCounter++;
			}
		}
		System.out.println("Best Hand (p2):");
		for(int i = 0; i < 5; i++) {
			System.out.println("     " + bestHP2[i]);
		}
		
		
		// Royal Flush > Straight Flush > Four of a Kind > Full House > Flush > Straight > Three of a Kind > Two Pairs > One Pair > High Card
		
		for(int i = 0; i < 2; i++) { // see what both players have
			String[] playerHands = new String[5];
			if (i == 0) {
				for(int j = 0; j < 5; j++) {
					playerHands[j] = bestHP1[j];
				//	System.out.println(playerHands[j]);
				}
			} else if (i == 1) {
				for(int j = 0; j < 5; j++) {
					playerHands[j] = bestHP2[j];
				//	System.out.println(playerHands[j]);
				}
			}
			
			// convert string to num, jack to 11
			int[] stringToNum = new int[5];
			for (int j = 0; j < 5; j++) { // convert the string of each card to a number (e.g. Ace of Hearts --> 14)
				String temp = playerHands[j].substring(0, 1);
				int convert = 0;
				if (temp.equals("J")) {
					convert = 11;
				} else if (temp.equals("Q")) {
					convert = 12;
				} else if (temp.equals("K")) {
					convert = 13;
				} else if (temp.equals("A")) {
					convert = 14;
				} else if (temp.equals("1")) {
					convert = 10;
				} else {
					convert = Integer.valueOf(temp);
				}
				stringToNum[j] = convert;
			//	System.out.println("convert: " + convert);
			}
			
			// convert suite to values of 1-4. e.g. diamond = 1, club = 2
			String[] possibleFlush = new String[5];
			int[] suiteP1 = new int[5];
			for(int j = 0; j < 5; j++) {
				possibleFlush[j] = playerHands[j].substring(playerHands[j].length()-2, playerHands[j].length()-1);
				for(int k = playerHands[j].length()-3; k >= 0; k--) {
					if (playerHands[j].charAt(k) == ' ') {
						break;
					}
					possibleFlush[j] += playerHands[j].charAt(k);
				}
			//	System.out.println(possibleFlush[j]);
				if (possibleFlush[j].equals("dnomaiD")) { // stores suite backwards, because string is read from last character.
					suiteP1[j] = 1;
				} else if (possibleFlush[j].equals("bulC")) {
					suiteP1[j] = 2;
				} else if (possibleFlush[j].equals("traeH")) {
					suiteP1[j] = 3;
				} else if (possibleFlush[j].equals("edapS")) {
					suiteP1[j] = 4;
				}
			}
			
			boolean ifStraight = checkStraight(playerHands, stringToNum, i); // check for straight in player one hand
			boolean ifFlush = checkFlush(playerHands, suiteP1); // check for flush in player one's hand.
			int which = checkDoublesTriplesQuads(stringToNum);
		
		//	System.out.println("which" + which);
			int highest = 0;
			if (turn == 0) {
				highest = highestCardP1;
			} else {
				highest = highestCardP2;
			}
			
			boolean bad = false;
			if (ifStraight && ifFlush && highest == 14) { // check for royal flush
				System.out.println("Royal Flush");
			} else if (ifStraight && ifFlush) { // check for straight flush
				System.out.println("Straight flush");
			} else if (ifStraight) {
				System.out.println("Straight");
			} else if (ifFlush) {
				System.out.println("Flush");
			} else if (which == 4){
				System.out.println("Four of a kind.");
			} else if (which == 3 && numPairs == 1) {
				System.out.println("Full House");
			} else if (which == 3) {
				System.out.println("Three of a kind.");
			} else if (which == 2 && numPairs == 2) {
				System.out.println("Two Pairs.");
			} else if (which == 2) {
				System.out.println("Pair");
			} else {
				System.out.println("Lol your hand is bad.");
				System.out.println("     Your highest Card is: " + highest);
				bad = true;
			}
			
			if (bad == false) {
				System.out.println("Highest Card: " + highest);
			}
			
		}
		
		
	}
	
	static String[] getInput (String[] finalHand, String p1, String p2, int c) {
		
		// start getting input from player 1.
		System.out.println("     What community cards do you want to remove? (e.g. Ace of Hearts.)");
		System.out.println("\n     Here are all the available cards:");
		for(int i = 0; i < 5; i++) {
			System.out.println("          --> " + communityCards[i]);
		}
		
		System.out.println("          Enter the first community card to remove:"); // reading all the five best cards for player 1.
		System.out.print("            ~~~~~: ");
		finalHand[c] = sc.nextLine();
		System.out.println(finalHand[c]);
		finalHand[c] = ValidCommunity(finalHand, c);
		c++;

		System.out.println("          Enter the second community card to remove:");
		System.out.print("            ~~~~~: ");
		finalHand[c] = sc.nextLine();
		finalHand[c] = ValidCommunity(finalHand, c);
		
		return finalHand;

	}
	
	static String ValidCommunity(String[] finalHand, int c) {
		
		do { // end when input is a valid card
			int countValid = 0;
			for(int j = 0; j < 5; j++) {
				if (finalHand[c].equals(communityCards[j])) {
					countValid++;
				}
			}
			if (countValid != 1) {
				System.out.print("          Invalid input, please enter community card again.");
				System.out.print("\n               ~~~~~: ");
				finalHand[c] = sc.nextLine();
			} else {
				break;
			}
			
		} while (true);
		
		return finalHand[c];
	}

	static boolean checkStraight(String[] playerHands, int[] stringToNum, int turn) {
		// check for straight
		Arrays.sort(stringToNum); // sort stringToNum from low to high
		if (turn == 0) {
			highestCardP1 = stringToNum[4]; // check for royal flush later, and compare who has higher straight.
		} else {
			highestCardP2 = stringToNum[4];
		}
		
		int previous = stringToNum[0];
		boolean ifStraight = false;

		for (int i = 1; i < 5; i++) {
			if (stringToNum[i] - previous != 1) { // if the current card value - previous card value is not 1, so gap between cards isn't one. 
												  // Then it can't be a straight.
				ifStraight = false;
				break;
			} else { // keep changing previous card to compare with
				previous = stringToNum[i];
				ifStraight = true;
			}
		}
		return ifStraight;
	}
	
	static boolean checkFlush(String[] bestHP1, int[] suiteP1) {
		// check for flush
		boolean ifFlush = false;
		int tempSuite = suiteP1[0]; // set first index to temp variable
		for (int i = 1; i < 5; i++) { // go through the suiteP1 array to check if all of them are to same number.
			
			// check if current value is equal to first/temp value.
			if (suiteP1[i] != tempSuite) {
				ifFlush = false;
				break;
			} else {
				ifFlush = true;
			}
		}
		return ifFlush;
	}
	
	static int checkDoublesTriplesQuads(int[] communityCards) {
		int[] tally = new int[14];

		for (int i = 1; i < 14; i++) {
			tally[i] = 0;
		}
		
		for (int i = 0; i < 5; i++) {
			tally[communityCards[i]-1]++;
		}

		int which = 0;

		for (int i = 1; i < 14; i++) {
			if (tally[i] > 1) {
				if (tally[i] == 2) {
				//	System.out.println("There is a double");
					numPairs++; // count number of pairs to check for two pair and full house.
					which = 2;
				} else if (tally[i] == 3) {
				//	System.out.println("There is a triple");
					which = 3;
				} else if (tally[i] == 4) {
				//	System.out.println("There is a quadruple");
					which = 4;
				}
			}
		}

		return which;
	}

//derrick's stuff, this is for the entire betting round
 (incomplete)
 
 public static boolean validateNumbers(String n) {
        String numbers[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
        int total = 0;
        for (int i = 0; i < n.length(); i++) {
            for (int j = 0; j < 10; j++) {
                if (n.charAt(i) == numbers[j].charAt(0)) {
                    total++;
                }
            }
        }
        if (total == n.length()) {
            return true;
        } else {
            return false;
        }
    }

    public static void betting(int player, int raised, boolean bettingArray[], String name) {
        bettingArray[0] = false; //sets the boolean that means the previous player betted to false
        bettingArray[1] = false; //sets the booealan that means the previous player folded to false
        Scanner input = new Scanner(System.in);
        System.out.println("     Welcome player " + name); //introduce
        System.out.println();
        if (raised > 0) {
            System.out.println("     The amount of money that has been raised to that you need to match is: ");
        } else {
            System.out.println("     There has been no raised money so far.");
        }
        if (player == 0 && raised == 0) {//the first player the 1st time they go
            System.out.println("     You have the option to bet, fold, or check");
            System.out.println("             Bet         Fold           Check ");
            System.out.println("             (1)         (2)              (3)");
            String option = input.nextLine(); //save value as string, change to integer later
            if (!option.equals("1") && !option.equals("2") && !option.equals("3")) { //input validation, make sure they enter 1, 2, 3
                System.out.println("               Invalid input. Please enter 1, 2, or 3");
                option = input.nextLine();
            }
            int intOption = Integer.parseInt(option);
            if (intOption == 1) { //betting
                bettingArray[0] = true; //sets the boolean for betting to true, next player goes in order to continue
                System.out.println("     You have the option to bet or go all in"); //prompt user to choose to bet or go all in
                System.out.println("             Bet         All In");
                System.out.println("             (1)         (2)");
                option = input.nextLine();
                if (!option.equals("1") && !option.equals("2")) { //input validation, make sure they enter 1, 2, 3
                    System.out.println("          Invalid input. Please enter 1 or 2");
                    option = input.nextLine();
                }
                intOption = Integer.parseInt(option);
                if (intOption == 1) { //bet
                    System.out.println("     What amount of money would you like to bet?");
                    String bet = input.nextLine();
                    while (validateNumbers(bet) == false || Integer.parseInt(bet) < playerMoney[player]) { //validate that the money is an integer
                        System.out.println("          The money entered is invalid, enter again.");
                        bet = input.nextLine();
                    }
                    raised = Integer.parseInt(bet);
                    System.out.println("    The pot now has $" + raised);
                    playerMoney[player] -= raised;
                    return; //go back
                } else { //all in
                    System.out.println("     You have put in all your money, which is $" + playerMoney[player]);
                    raised = playerMoney[player]; //the money in the pot is all their money
                    playerMoney[player] = 0; //the player has no more money
                }
            } else if (intOption == 2) { //fold
                bettingArray[1] = true; //sets the fold array to true
                
            } else if (intOption == 3) { //check
                
            }

        }
    }


}
